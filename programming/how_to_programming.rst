######################################
プログラミングの具体的な方法（我流）
######################################

ここでは、プログラミングのやり方（我流）について記す。
今回は、「何らかのAPIを叩いてグラフを描画する」というシナリオでPythonで **実際には動くことのない** コード（擬似コード）を書いていく。

擬似コードなので、当然だが文中のソースコードをコピペしても動くわけない。

| もしそれをやって、
| 「動かないなあ、このコード間違ってるじゃん」
| とほざいている輩は、「プログラミングとは」というのをもう一回勉強するか、この文章を落ち着いて読め、どアホ。

| 正直筆者自身が、
| 「あれ？　プログラミングってどうやったっけ？」
| と忘れることが多々多々多々多々あるので、考え方を書き留めておくだけの文章である。


1. やりたいことをはっきりする
##########################################

大抵のプログラミングにおいては、やりたいこと（ゴール）をある程度はっきりさせないことには何もかけないので、はっきりさせる。

おもむろに登場人物（クラス）を定義する。
============================================

なんか必要な機能が思い浮かんだら、おもむろにクラスを定義する。

「まずAPIを叩く人がいるでしょ？　APIを解析してPythonで扱うデータに変換する人がいるな。ついでにそれをグラフにする人が必要か」

だいたい3人くらい思いついたら、こんな感じで書いておく ::

  '''
  APIを叩く人
  '''
  class APIKnocker:

  '''
  APIから帰ってきたデータを元に、Pythonのデータに変換する人
  '''
  class Transfer:

  '''
  グラフを描く人
  '''
  class Drawer:

おもむろにメソッド名を書く
=====================================

読者、または読者の利用している言語によっては、パソコンにやらせたいことを直接かけるケースもあると思う。
そういう場合は、フッツーにメソッド定義するといいのではないかなーと思ったりする。

| なお、筆者はいきなりメソッドや関数を書くと、
| 「はて、このメソッド・関数が必要とするデータはなんだろう？」
| と考えて、思考の勢いがどんづまるため、こっちの書き方は得意じゃない。

とりあえず参考程度に。 ::

  '''
  APIを叩く
  '''
  def ApiKnock(address:str): -> str

  '''
  データ変換
  '''
  def translateAndFilther(re_data:str): -> List(int)

  '''
  グラフ描画
  （何を突っ込んだら描画されるんだ？）
  '''
  def draw():

大切なこと -- 構文エラーはとりあえず無視しろ
################################################

ここで大切なことをひとつ。

構文エラー、シンタックスエラーはこのとき無視しろ。

それに気を取られて勢いが死んだら、きっとコードを2割も書ききれずに1日が終わる。少なくとも筆者はそうだ。

| IDEや優秀なテキストエディタは、とやかく、
| 「おめえ、このコード動かねえから！」
| と指摘をするが、
| 「うっせえ！　俺は今頭の中で考えたロジックを書き出すので忙しいんだボケェ！」
| と制する。脳内シンタックスエラーが出て3秒以内に直せそうもない場合も、「うっせえ！」と自分を制すること。

中身を書いていく
######################

とりあえずクラスやメソッドは定義した？　じゃあ具体的に書いていこう。

クラス編（メソッドを書いていく）
======================================

クラスから書いていった人は、 **まず** そのクラスにやらせたい工程をメソッドとして一通り書く。 ::

  '''
  APIを叩く人
  '''
  class APIKnocker:
      def __init__:
          pass
      def requestMake(???):
          pass
      def knock():
          pass

  '''
  APIから帰ってきたデータを元に、Pythonのデータに変換する人
  '''
  class Transfer:
      def __init__:
          pass
      def transform: -> ???
          pass

  '''
  グラフを描く人
  '''
  class Drawer:
      def __init__:
          pass
      def draw:
          pass
  
もう一度いうが、構文エラー・シンタックスエラーにはまだ気を使うな。

| 雰囲気、
| 「自分のやりたいことは、こんな機能があればじつげんできるなあ」
| ということのアウトライン・概要・章を書いていく。

このあと
###################

あとは実装の中身を具体的に書いていく。

でも一つのメソッドを完璧にするのはもう少しあと。

もしテストコードが書けるのであれば、実装に移る前にテストコードを書くことをおすすめする。

それから実装を詰めていく感じ。

| テスト駆動開発のサバンナのライオンこと「和田卓人」さんなら、きっと、
| 「おまえそれ、本当に完成させる気あるの？」
| というだろうけど、これは完成まであと4割くらいというところまで詰める際の話をしたいのだ。

ということで、6割完成するまで、思いついた実装を、あちこちのクラスやメソッドに移動していいので、ちまちま実装する。

あるメソッド・関数を実装していくうちに、他のメソッドで行わなければいけないことに気づくだろうし、
もっと処理をまとめられるところも出てくるだろうし、実装しているときはほぼ調べながらなので、とりあえず書け。

まとめ
##################

レヴィストロースの様に書け、そして推敲しろ。

これはプログラミングでもできる気がした。

というだけ。
